library;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  synthetic constructor •() → self::A
    ;
  method aMethod() → dynamic
    ;
  abstract method abstractMethod() → dynamic;
  abstract set property1(dynamic _) → void;
  abstract set property2(dynamic _) → void;
  abstract set property3(dynamic _) → void;
}
abstract class B extends self::A {
  final field dynamic property1;
  synthetic constructor •() → self::B
    ;
  method aMethod() → dynamic
    ;
  method bMethod() → dynamic
    ;
}
class MyClass extends self::B {
  field dynamic property2;
  synthetic constructor •() → self::MyClass
    ;
  method aaMethod() → dynamic
    ;
  method aMethod() → dynamic
    ;
  method bMethod() → dynamic
    ;
  method cMethod() → dynamic
    ;
  no-such-method-forwarder set property3(dynamic _) → void
    return this.{core::Object::noSuchMethod}(new core::_InvocationMirror::_withType(#property3=, 2, const <core::Type>[], core::List::unmodifiable<dynamic>(<dynamic>[_]), core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{})));
  no-such-method-forwarder set property1(dynamic _) → void
    return this.{core::Object::noSuchMethod}(new core::_InvocationMirror::_withType(#property1=, 2, const <core::Type>[], core::List::unmodifiable<dynamic>(<dynamic>[_]), core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{})));
}
static method main() → dynamic
  ;
