library;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → void
    ;
  abstract method foo() → void;
}
class A extends core::Object implements self::I {
  synthetic constructor •() → void
    ;
  method noSuchMethod(core::Invocation i) → dynamic
    ;
  abstract no-such-method-forwarder method foo() → void;
}
abstract class _B&Object&A = core::Object with self::A {
}
class B extends self::_B&Object&A {
  synthetic constructor •() → void
    ;
}
static method main() → dynamic
  ;
