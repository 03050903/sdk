library private;
import self as self;
import "dart:core" as core;
import "./private_module.dart" as pri;

abstract class Foo extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation invocation) → dynamic
    return 42;
}
class Bar extends self::Foo implements pri::Fisk {
  synthetic constructor •() → void
    : super self::Foo::•()
    ;
  abstract no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void;
}
class Baz extends self::Foo implements pri::Fisk {
  synthetic constructor •() → void
    : super self::Foo::•()
    ;
  method _hest() → dynamic
    return null;
  abstract no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void;
}
static method main() → dynamic {}
