library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class C<T extends self::A> extends core::Object {
  generic-covariant-impl generic-covariant-interface field self::C::T _field = null;
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo(generic-covariant-impl generic-covariant-interface self::C::T x) → dynamic {
    this.{self::C::_field} = x;
  }
}
class D extends self::C<self::B> {
  synthetic constructor •() → void
    : super self::C::•()
    ;
  abstract forwarding-stub method foo(generic-covariant-impl self::B x) → dynamic;
  abstract forwarding-stub set _field(generic-covariant-impl self::B _) → void;
}
abstract class _Foo&Object&C extends core::Object implements self::C<self::B> {
  generic-covariant-impl field self::B _field = null;
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo(generic-covariant-impl self::B x) → dynamic {
    this.{self::C::_field} = x;
  }
}
class Foo extends self::_Foo&Object&C {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  abstract forwarding-stub set _field(generic-covariant-impl self::B _) → void;
}
class B extends self::A {
  synthetic constructor •() → void
    : super self::A::•()
    ;
}
static method main() → dynamic {
  self::Foo foo = new self::Foo::•();
  foo.{self::C::foo}(new self::B::•());
}
