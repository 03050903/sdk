library test;
import self as self;
import "dart:core" as core;

static const field dynamic #errors = const <dynamic>["pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:14:5: Error: A value of type '<T extends dart.core::Object>(dart.core::String) \u8594 dart.core::String' can't be assigned to a variable of type '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\n    v = /*error:INVALID_ASSIGNMENT*/ <T> /*@returnType=String*/ (String x) =>\n    ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:16:5: Error: A value of type '<T extends dart.core::Object>(dart.core::int) \u8594 dart.core::int' can't be assigned to a variable of type '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\n    v = /*error:INVALID_ASSIGNMENT*/ <T> /*@returnType=int*/ (int x) => 3;\n    ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:18:7: Error: A value of type 'dart.core::int' can't be assigned to a variable of type 'dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::String'.\n      return /*error:RETURN_OF_INVALID_TYPE*/ 3;\n      ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:26:5: Error: A value of type '<T extends dart.core::Object>(dart.core::int) \u8594 dart.core::int' can't be assigned to a variable of type '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\n    v = /*info:INFERRED_TYPE_CLOSURE, error:INVALID_ASSIGNMENT*/ <\n    ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:30:7: Error: A value of type 'dart.core::int' can't be assigned to a variable of type 'dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::String'.\n      return /*error:RETURN_OF_INVALID_TYPE*/ 3;\n      ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:33:7: Error: A value of type 'dart.core::int' can't be assigned to a variable of type 'dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::String'.\n      return /*error:RETURN_OF_INVALID_TYPE*/ x;\n      ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:43:5: Error: A value of type '<T extends dart.core::Object>(dart.core::String) \u8594 dart.core::List<dart.core::String>' can't be assigned to a variable of type '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::List<dart.core::String>'.\nTry changing the type of the left hand side, or casting the right hand side to '<S extends dart.core::Object>(dart.core::int) \u8594 dart.core::List<dart.core::String>'.\n    v = /*error:INVALID_ASSIGNMENT*/ <T> /*@returnType=List<String>*/ (String\n    ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:46:54: Error: A value of type 'dart.core::int' can't be assigned to a variable of type 'dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::String'.\n          /*error:LIST_ELEMENT_TYPE_NOT_ASSIGNABLE*/ 3\n                                                     ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:50:52: Error: A value of type 'dart.core::int' can't be assigned to a variable of type 'dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::String'.\n        /*error:LIST_ELEMENT_TYPE_NOT_ASSIGNABLE*/ 3\n                                                   ^", "pkg/front_end/testcases/inference/downwards_inference_on_generic_function_expressions.dart:62:5: Error: A value of type '<T extends dart.core::Object>(dart.core::int) \u8594 dart.core::int' can't be assigned to a variable of type '<T extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\nTry changing the type of the left hand side, or casting the right hand side to '<T extends dart.core::Object>(dart.core::int) \u8594 dart.core::String'.\n    y = /*info:INFERRED_TYPE_CLOSURE, error:INVALID_ASSIGNMENT*/ <\n    ^"]/* from null */;
static method test() → void {
  {
    function f<S extends core::Object>(core::int x) → core::String
      return null;
    <S extends core::Object>(core::int) → core::String v = f;
    v = <T extends core::Object>(core::int x) → core::String => null;
    v = <T extends core::Object>(core::int x) → core::String => "hello";
    v = (<T extends core::Object>(core::String x) → core::String => "hello") as{TypeError} <S extends core::Object>(core::int) → core::String;
    v = (<T extends core::Object>(core::int x) → core::int => 3) as{TypeError} <S extends core::Object>(core::int) → core::String;
    v = <T extends core::Object>(core::int x) → core::String {
      return 3 as{TypeError} core::String;
    };
  }
  {
    function f<S extends core::Object>(core::int x) → core::String
      return null;
    <S extends core::Object>(core::int) → core::String v = f;
    v = <T extends core::Object>(core::int x) → core::String => null;
    v = <T extends core::Object>(core::int x) → core::String => "hello";
    v = (<T extends core::Object>(core::int x) → core::int => 3) as{TypeError} <S extends core::Object>(core::int) → core::String;
    v = <T extends core::Object>(core::int x) → core::String {
      return 3 as{TypeError} core::String;
    };
    v = <T extends core::Object>(core::int x) → core::String {
      return x as{TypeError} core::String;
    };
  }
  {
    function f<S extends core::Object>(core::int x) → core::List<core::String>
      return null;
    <S extends core::Object>(core::int) → core::List<core::String> v = f;
    v = <T extends core::Object>(core::int x) → core::List<core::String> => null;
    v = <T extends core::Object>(core::int x) → core::List<core::String> => <core::String>["hello"];
    v = (<T extends core::Object>(core::String x) → core::List<core::String> => <core::String>["hello"]) as{TypeError} <S extends core::Object>(core::int) → core::List<core::String>;
    v = <T extends core::Object>(core::int x) → core::List<core::String> => <core::String>[3 as{TypeError} core::String];
    v = <T extends core::Object>(core::int x) → core::List<core::String> {
      return <core::String>[3 as{TypeError} core::String];
    };
  }
  {
    function int2int<S extends core::Object>(core::int x) → core::int
      return null;
    function int2String<T extends core::Object>(core::int x) → core::String
      return null;
    function string2String<T extends core::Object>(core::String x) → core::String
      return null;
    <S extends core::Object>(core::int) → core::int x = int2int;
    x = <T extends core::Object>(core::int x) → core::int => x;
    x = <T extends core::Object>(core::int x) → core::int => x.{core::num::+}(1);
    <T extends core::Object>(core::int) → core::String y = int2String;
    y = (<T extends core::Object>(core::int x) → core::int => x) as{TypeError} <T extends core::Object>(core::int) → core::String;
    y = <T extends core::Object>(core::int x) → core::String => x.substring(3);
    <T extends core::Object>(core::String) → core::String z = string2String;
    z = <T extends core::Object>(core::String x) → core::String => x.{core::String::substring}(3);
  }
}
static method main() → dynamic {}
