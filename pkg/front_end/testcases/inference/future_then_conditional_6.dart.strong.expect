library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

class MyFuture<T extends core::Object> extends core::Object implements asy::Future<self::MyFuture::T> {
  constructor •() → void
    : super core::Object::•() {}
  constructor value(self::MyFuture::T x) → void
    : super core::Object::•() {}
  abstract method noSuchMethod(core::Invocation invocation) → dynamic;
  method then<S extends core::Object>((self::MyFuture::T) → asy::FutureOr<self::MyFuture::then::S> f, {core::Function onError = null}) → self::MyFuture<self::MyFuture::then::S>
    return null;
}
static method test() → void {
  asy::Future<core::bool> f;
  asy::Future<core::int> t1 = f.{asy::Future::then}<core::int>((core::bool x) → asy::Future<core::int> async => x ?{core::int} 2 : await asy::Future::value<core::int>(3));
  asy::Future<core::int> t2 = f.{asy::Future::then}<core::int>((core::bool x) → asy::Future<core::int> async {
    return (await x ?{core::Object} 2 : asy::Future::value<core::int>(3)) as{TypeError} asy::FutureOr<core::int>;
  });
  asy::Future<core::int> t5 = f.{asy::Future::then}<core::int>(let final dynamic #t1 = (core::bool x) → core::Object => x ?{core::Object} 2 : asy::Future::value<core::int>(3) in let dynamic _ = null in const core::_ConstantExpressionError::•().{core::_ConstantExpressionError::_throw}(new core::_CompileTimeError::•("pkg/front_end/testcases/inference/future_then_conditional_6.dart:28:30: Error: The function expression type '(dart.core::bool) \u8594 dart.core::Object' isn't of expected type '(dart.core::bool) \u8594 dart.async::FutureOr<dart.core::int>'.\nChange the type of the function expression or the context in which it is used.\n      /*@returnType=Object*/ (/*@type=bool*/ x) =>\n                             ^")));
  asy::Future<core::int> t6 = f.{asy::Future::then}<core::int>((core::bool x) → asy::FutureOr<core::int> {
    return (x ?{core::Object} 2 : asy::Future::value<core::int>(3)) as{TypeError} asy::FutureOr<core::int>;
  });
}
static method main() → dynamic {}
