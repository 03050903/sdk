library test;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
}
class B extends self::A {
  constructor •() → void
    : super self::A::•()
    ;
  operator +(self::C v) → self::A
    return null;
  operator -(core::int i) → self::B
    return null;
  operator *(self::B v) → self::B
    return null;
  operator &(self::A v) → self::C
    return null;
}
class C extends self::B {
  constructor •() → void
    : super self::B::•()
    ;
}
class Base extends core::Object {
  field self::B member = null;
  constructor •() → void
    : super core::Object::•()
    ;
}
class Test extends self::Base {
  constructor •() → void
    : super self::Base::•()
    ;
  method test() → void {
    this.{=self::Base::member} = self::f();
    this.{=self::Base::member}.==(null) ? this.{=self::Base::member} = self::f() : null;
    this.{=self::Base::member} = this.{=self::Base::member}.+(self::f());
    this.{=self::Base::member} = this.{=self::Base::member}.*(self::f());
    this.{=self::Base::member} = this.{=self::Base::member}.&(self::f());
    this.{=self::Base::member} = this.{=self::Base::member}.-(1);
    this.{=self::Base::member} = this.{=self::Base::member}.-(1);
    dynamic v1 = this.{=self::Base::member} = self::f();
    dynamic v2 = let final dynamic #t1 = this.{=self::Base::member} in #t1.==(null) ? this.{=self::Base::member} = self::f() : #t1;
    dynamic v3 = this.{=self::Base::member} = this.{=self::Base::member}.+(self::f());
    dynamic v4 = this.{=self::Base::member} = this.{=self::Base::member}.*(self::f());
    dynamic v5 = this.{=self::Base::member} = this.{=self::Base::member}.&(self::f());
    dynamic v6 = this.{=self::Base::member} = this.{=self::Base::member}.-(1);
    dynamic v7 = let final dynamic #t2 = this.{=self::Base::member} in let final dynamic #t3 = this.{=self::Base::member} = #t2.-(1) in #t2;
  }
}
static method f() → dynamic
  return null;
static method main() → dynamic {}
