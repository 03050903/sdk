library test;
import self as self;
import "dart:core" as core;
import "./infer_types_on_generic_instantiations_in_library_cycle_a.dart" as inf;

abstract class A<E extends core::Object> extends core::Object implements inf::I<self::A::E> {
  final field self::A::E value = null;
  const constructor •() → void
    : super core::Object::•()
    ;
}
abstract class M extends core::Object {
  final field core::int y = 0;
  default constructor •() → void
    : super core::Object::•()
    ;
}
class B<E extends core::Object> extends self::A<self::B::E> implements self::M {
  const constructor •() → void
    : super self::A::•()
    ;
  get y() → core::int
    return 0;
  method m(dynamic a, (dynamic, core::int) → dynamic f) → self::A<self::B::E> {}
}
static const field dynamic #errors = const <dynamic>["pkg/front_end/testcases/inference/infer_types_on_generic_instantiations_in_library_cycle.dart:28:7: Error: A value of type 'dart.core::String' can't be assigned to a variable of type 'dart.core::int'.\nTry changing the type of the left hand side, or casting the right hand side to 'dart.core::int'.\n  int y = /*error:INVALID_ASSIGNMENT*/ new B<String>()\n      ^"]/* from null */;
static method foo() → dynamic {
  core::int y = new self::B::•<core::String>().{self::B::m}(null, null).{self::A::value} as{TypeError} core::int;
  core::String z = new self::B::•<core::String>().{self::B::m}(null, null).{self::A::value};
}
static method main() → dynamic {}
