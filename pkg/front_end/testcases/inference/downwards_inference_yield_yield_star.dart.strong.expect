library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

abstract class MyStream<T extends core::Object> extends asy::Stream<self::MyStream::T> {
  static factory •<T extends core::Object>() → self::MyStream<self::MyStream::•::T>
    return null;
  forwardingStub method pipe(asy::StreamConsumer<self::MyStream::T> streamConsumer) → asy::Future<dynamic>
    return super.{asy::Stream::pipe}(streamConsumer);
  forwardingStub method transform<S extends core::Object>(asy::StreamTransformer<self::MyStream::T, self::MyStream::transform::S> streamTransformer) → asy::Stream<self::MyStream::transform::S>
    return super.{asy::Stream::transform}<self::MyStream::transform::S>(streamTransformer);
  forwardingStub method reduce((self::MyStream::T, self::MyStream::T) → self::MyStream::T combine) → asy::Future<self::MyStream::T>
    return super.{asy::Stream::reduce}(combine);
}
static method foo() → asy::Stream<core::List<core::int>> async* {
  yield<core::int>[];
  yield self::MyStream::•<dynamic>();
  yield*<dynamic>[];
  yield* self::MyStream::•<core::List<core::int>>();
}
static method bar() → core::Iterable<core::Map<core::int, core::int>> sync* {
  yield<core::int, core::int>{};
  yield core::List::_internal<dynamic>();
  yield*<dynamic, dynamic>{};
  yield* core::List::_internal<core::Map<core::int, core::int>>();
}
static method main() → dynamic {}
